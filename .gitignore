# Referência: https://www.youtube.com/watch?v=lPfmfXYPVXY
# Carteira será um dicionário

from datetime import datetime
import json 
#Jjson = javascript objective notation - formato de arquivo

try:
#Módulo 'r'(read) precisa que o arquivo já exista para que possa ser lido, já o 'w'(write) cria um para escrever nele caso o mesmo já não exista.
    with open('carteira.json', 'r') as file:
        carteira = json.loads(file.read())

    id_transacao = carteira["identificador"]
    carteira.pop("idtransacao")
except:
    carteira = {}
    id_transacao = 1
# Try: É uma tratativa de erro. Caso o arquivo esteja rodando pela primeira vez não haverá identificador já que não há transação. 
# Nesse caso sera setado pelo except uma carteira vazia com id_transação igual a 1.

def listarTransacao():
    if len(carteira) == 0:
        print("\nSem transações!")
        return
    print("\nSuas Transações: ")

    for transacao in sorted(
        carteira.values(), 
        key=lambda transacao: str(transacao["identificador"]), reverse=True):

        print(f'{transacao["identificador"]} - {transacao["data"]} - {transacao["descricao"]}: R${transacao["valor"]:.2f}')
#sorted = ordenar
#lambda cria uma função anônima
#:.2f é para mostrar só duas casas após a 
#Função anônima para ordenar pelo identificador das transações.
#reverse é para mostrar ao contrário. Do último ao primeiro.
                
def adicionarTransacao():
    global id_transacao

    descricao = input('\nDigite a descrição da transação: ')
    valor = float(input('Digite o valor da transação (com sinal de - se for despesa): '))
    data = str(datetime.now())

    transacao = {
        "valor": valor,
        "descricao": descricao,
        "data": data,
        "identificador": str(id_transacao),
    }

    carteira["id_" + str(id_transacao)] = transacao
    id_transacao += 1
    print('Transação adicionada com sucesso!')

def deletarTransacao():
    identificador = "id_" + input('\nDigie o id da transação que quer deletar: ')
    transacao = carteira.pop(identificador)
    print(f'A transação {transacao["identificador"]} - "{transacao["descricao"]}", no valor de R${transacao["valor"]:.2f} foi excluída com sucesso!')
#pop tira algo do dicionário

def editarTransacao():
    id_transacao = int(input('\nDigite o id da transação que quer editar: '))
    identificador = "id_" + str(id_transacao)

    descricao = input('Digite a nova descrição da transação: ')
    valor = float(input('Digite o novo valor da transação: '))
    mudar_data = input('Digite S para mudar a data da transação para a data atual ou N para manter a data antiga: ').upper()
    if mudar_data == 'S':
        data = str(datetime.now())
    else:
        data = carteira[identificador]["data"]

    transacao = {
        "valor": valor,
        "descricao": descricao,
        "data": data,
        "identificador": id_transacao,
    }

    carteira["id_" + str(id_transacao)] = transacao

    print(f'Transação {id_transacao} editada com sucesso!')


def consultarSaldo():
    saldo = 0
    for transacao in carteira.values():
        saldo += transacao["valor"]

    print(f'seu saldo atual é R${saldo:.2f}')

def salvarCarteira():
    c = carteira.copy()
    
    c["idtransacao"] = id_transacao
    with open('carteira.json', 'w') as file:
        file.write(json.dumps(c))

#with open - Abrevia a lógica de abrir e fechar o arquivo
#transforma o dicionário em uma string pra poder ser buscado pelo python.
# w (é um módulo de abertura do arquivo)
# w é o comando de Wrhite para sobreescrever o arquivo

while True:
    op = input("""\nDigie:
    \nL - listar Transações
    \nA - Adicionar Transaçao
    \nD - Deletar Transação
    \nE - Editar Transação
    \nC - Consultar saldo
    \nQ - Sair do Programa
    \nSua entrada: """).upper()

    if op == 'L':
        listarTransacao()

    elif op == 'A':
        adicionarTransacao()
        salvarCarteira()

    elif op == 'D':
        deletarTransacao()
        salvarCarteira()

    elif op == 'E':
        editarTransacao()
        salvarCarteira()

    elif op == 'C':
        consultarSaldo()
        
    elif op == 'Q':
        exit()

    else: 
        print("Operação não definida!")
